import { Observable } from "rxjs"
import shareLatest from "./internal/share-latest"
import reactEnhancer from "./internal/react-enhancer"
import { BehaviorObservable } from "./internal/BehaviorObservable"
import { useObservable } from "./internal/useObservable"
import { SUSPENSE } from "./SUSPENSE"

/**
 * Accepts: A factory function that returns an Observable.
 *
 * Returns [1, 2]
 * 1. A React Hook function with the same parameters as the factory function.
 *  This hook will yield the latest update from the observable returned from
 *  the factory function.
 * 2. A shared replayable version of the observable generated by the factory
 *  function that can be used for composing other streams that depend on it.
 *  This observable is disposed when its refCount goes down to zero.
 *
 * @param getObservable Factory of observables. The arguments of this function
 *  will be the ones used in the hook.
 * @param unsubscribeGraceTime (= 200): Amount of time in ms that the shared
 *        observable should wait before unsubscribing from the source observable
 *        when there are no new subscribers.
 */
export function connectFactoryObservable<
  A extends (number | string | boolean | null)[],
  O
>(
  getObservable: (...args: A) => Observable<O>,
  unsubscribeGraceTime = 200,
): [
  (...args: A) => Exclude<O, typeof SUSPENSE>,
  (...args: A) => Observable<O>,
] {
  const cache = new Map<
    string,
    [BehaviorObservable<O>, BehaviorObservable<O>]
  >()

  const getSharedObservables$ = (
    ...input: A
  ): [BehaviorObservable<O>, BehaviorObservable<O>] => {
    const key = JSON.stringify(input)
    const cachedVal = cache.get(key)

    if (cachedVal !== undefined) {
      return cachedVal
    }

    const sharedObservable$ = shareLatest<O>(false, () => {
      cache.delete(key)
    })(getObservable(...input))

    const reactObservable$ = reactEnhancer(
      sharedObservable$,
      unsubscribeGraceTime,
    )
    const result: [BehaviorObservable<O>, BehaviorObservable<O>] = [
      sharedObservable$,
      reactObservable$,
    ]

    cache.set(key, result)
    return result
  }
  const getSharedObservable$ = (...input: A) =>
    getSharedObservables$(...input)[0]

  return [
    (...input: A) => useObservable(getSharedObservables$(...input)[1]),

    getSharedObservable$,
  ]
}
