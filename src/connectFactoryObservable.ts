import { Observable } from "rxjs"
import shareLatest from "./internal/share-latest"
import reactEnhancer from "./internal/react-enhancer"
import { BehaviorObservable } from "./internal/BehaviorObservable"
import { useObservable } from "./internal/useObservable"
import { SUSPENSE } from "./SUSPENSE"
import { takeUntilComplete } from "./internal/take-until-complete"

/**
 * Accepts: A factory function that returns an Observable.
 *
 * Returns [1, 2]
 * 1. A React Hook function with the same parameters as the factory function.
 *  This hook will yield the latest update from the observable returned from
 *  the factory function.
 * 2. A `sharedLatest` version of the observable generated by the factory
 *  function that can be used for composing other streams that depend on it.
 *  The shared subscription is closed as soon as there are no subscribers to
 *  that observable.
 *
 * @param getObservable Factory of observables. The arguments of this function
 *  will be the ones used in the hook.
 * @param unsubscribeGraceTime (= 200): Amount of time in ms that the shared
 *  observable should wait before unsubscribing from the source observable when
 *  there are no new subscribers.
 *
 * @remarks If the Observable doesn't synchronously emit a value upon the first
 * subscription, then the hook will leverage React Suspense while it's waiting
 * for the first value.
 */
export function connectFactoryObservable<
  A extends (number | string | boolean | null)[],
  O
>(
  getObservable: (...args: A) => Observable<O>,
  unsubscribeGraceTime = 200,
): [
  (...args: A) => Exclude<O, typeof SUSPENSE>,
  (...args: A) => Observable<O>,
] {
  const cache = new Map<string, [Observable<O>, BehaviorObservable<O>]>()

  const getSharedObservables$ = (
    ...input: A
  ): [Observable<O>, BehaviorObservable<O>] => {
    const key = JSON.stringify(input)
    const cachedVal = cache.get(key)

    if (cachedVal !== undefined) {
      return cachedVal
    }

    const sharedObservable$ = shareLatest(getObservable(...input), () => {
      cache.delete(key)
    })

    const reactObservable$ = reactEnhancer(
      sharedObservable$,
      unsubscribeGraceTime,
    )

    const result: [Observable<O>, BehaviorObservable<O>] = [
      takeUntilComplete(sharedObservable$),
      reactObservable$,
    ]

    cache.set(key, result)
    return result
  }

  return [
    (...input: A) => useObservable(getSharedObservables$(...input)[1]),
    (...input: A) => getSharedObservables$(...input)[0],
  ]
}
